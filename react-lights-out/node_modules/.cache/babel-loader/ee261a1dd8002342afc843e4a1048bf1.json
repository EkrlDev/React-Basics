{"ast":null,"code":"import _slicedToArray from \"E:\\\\Dev\\\\WEBDevelopement\\\\Colt Steele\\\\React Basics\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"E:\\\\Dev\\\\WEBDevelopement\\\\Colt Steele\\\\React Basics\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Dev\\\\WEBDevelopement\\\\Colt Steele\\\\React Basics\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\Dev\\\\WEBDevelopement\\\\Colt Steele\\\\React Basics\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Dev\\\\WEBDevelopement\\\\Colt Steele\\\\React Basics\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\Dev\\\\WEBDevelopement\\\\Colt Steele\\\\React Basics\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\Dev\\\\WEBDevelopement\\\\Colt Steele\\\\React Basics\\\\react-lights-out\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n\n    _this.flipCellsAround = function (coord) {\n      var _this$props = _this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = _this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      //   this.setState({board, hasWon});\n\n    };\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    }; // TODO: set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"render\",\n\n    /** Render game board or winning message. */\n    value: function render() {\n      var tblBoard = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: this.state.board[y][x],\n            flipCellsAroundMe: this.flipCellsAround,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 18\n            }\n          }));\n        }\n\n        tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: y,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 21\n          }\n        }, row));\n        console.log(tblBoard);\n      }\n\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }\n      }, tblBoard)); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["E:/Dev/WEBDevelopement/Colt Steele/React Basics/react-lights-out/src/Board.js"],"names":["React","Component","Cell","Board","props","flipCellsAround","coord","ncols","nrows","board","state","split","map","Number","y","x","flipCell","hasWon","createBoard","row","push","Math","random","chanceLightStartsOn","tblBoard","console","log","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n      for (let y = 0; y < this.props.nrows; y++) {\n        let row = [];\n        for (let x = 0; x < this.props.ncols; x++) {\n         row.push(Math.random() < this.props.chanceLightStartsOn)\n        }\n        board.push(row);\n      }\n      \n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround = (coord) => {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n  //   this.setState({board, hasWon});\n }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++ ) {\n        let coord = `${y}-${x}`;\n        row.push(<Cell key={coord} isLit={this.state.board[y][x]} flipCellsAroundMe = {this.flipCellsAround} />);\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>)\n      console.log(tblBoard);\n    }\n    return (\n      <table className=\"Board\">\n        <tbody>\n          {tblBoard}\n        </tbody>\n      </table>\n    )\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}